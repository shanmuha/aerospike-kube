# Headless service to provide DNS lookup
apiVersion: v1
kind: Service
metadata:
  annotations:
    # Required anootation so that an empty DNS record is created (instead of being unresolvable)
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
  name: aerospike
  labels:
      app: aerospike-server
spec:
  ports:
  - port: 3000
    name: aerospike-client
  # *.aerospike.default.svc.cluster.local
  clusterIP: None
  selector:
    # Tells which pods are part of the DNS record
    app: aerospike
---
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: aerospike
spec:
  serviceName: "aerospike"
  replicas: 3
  template:
    metadata:
      labels:
        app: aerospike
      annotations:
        # Do not wait on user acknowledgement for pod startup
        pod.alpha.kubernetes.io/initialized: "true"
        # Init containers run on host before pod startup
        pod.alpha.kubernetes.io/init-containers: '[
          {
             "name": "install",
             "image": "muchbetter/aerospike:0.0.1",
             "env": [
                  {
                      "name": "POD_NAMESPACE",
                      "valueFrom": {
                          "fieldRef": {
                              "apiVersion": "v1",
                              "fieldPath": "metadata.namespace"
                          }
                      }
                   }
                ],
             "volumeMounts": [
               {
                 "name":"confdir",
                 "mountPath": "/etc/aerospike"
               }
             ]
          }
        ]'
    spec:
      terminationGracePeriodSeconds: 30
      containers:
      - name: aerospike
        image: aerospike/aerospike-server
        ports:
        - containerPort: 3000
          name: aero-clients
        - containerPort: 3002
          name: aero-mesh
        - containerPort: 3003
          name: aero-info
        readinessProbe:
          tcpSocket:
              port: 3000
          initialDelaySeconds: 15
          timeoutSeconds: 1
        volumeMounts: 
        - name: confdir
          mountPath: /etc/aerospike
        # Downward API:
        env:
        - name: MY_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: MY_POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: MY_POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
      volumes:
      - name: confdir
        emptyDir: {}
